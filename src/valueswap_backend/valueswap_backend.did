type CanisterIdRecord = record { canister_id : principal };
type CanisterSettings = record {
  freezing_threshold : opt nat;
  controllers : opt vec principal;
  reserved_cycles_limit : opt nat;
  memory_allocation : opt nat;
  compute_allocation : opt nat;
};
type CreateCanisterArgument = record { settings : opt CanisterSettings };
type CreatePoolParams = record {
  values : vec nat64;
  weights : vec float64;
  swap_fees : float64;
  token_names : vec text;
  balances : vec nat64;
};
type PoolShare = record {
  token_weights : vec float64;
  token_value : vec float64;
  token_balances : vec float64;
  token_names : vec text;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant {
  Ok : record { CanisterIdRecord };
  Err : record { RejectionCode; text };
};
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : nat; Err : text };
type TokenData = record {
  user_id : principal;
  amount : vec record { text; nat64 };
  pool_key : text;
};
service : () -> {
  create : () -> (Result);
  create_canister : (CreateCanisterArgument) -> (Result_1);
  create_pools : (CreatePoolParams) -> (Result_2);
  deposit_ckbtc : (nat64) -> (Result_3);
  get_constant_product_value : () -> (float64) query;
  get_lp_tokens : (text) -> (opt nat64) query;
  get_tokens : () -> (vec record { text; PoolShare }) query;
  pool_lp_tokens : (CreatePoolParams) -> (vec record { text; nat64 }) query;
  store_data_in_pool : (principal, CreatePoolParams) -> (Result_2);
  store_pool_data : (CreatePoolParams, principal, TokenData) -> ();
  total_lp_tokens : () -> (nat64) query;
}
